[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Programming",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Basic Python Programming",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Basic Python Programming</span>"
    ]
  },
  {
    "objectID": "programs.html",
    "href": "programs.html",
    "title": "2  Sample Programs",
    "section": "",
    "text": "2.1 Introduction to Python\nIn this tutorial, we will cover the basics of Python programming, including data types, keywords, variables, input/output statements, operators, arithmetic expressions, operator precedence, and evaluation of expressions.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sample Programs</span>"
    ]
  },
  {
    "objectID": "programs.html#data-types",
    "href": "programs.html#data-types",
    "title": "2  Sample Programs",
    "section": "2.2 Data Types",
    "text": "2.2 Data Types\nPython supports several built-in data types. Let’s explore some of the most common ones:\n\nInteger (int): Represents whole numbers.\nFloating Point (float): Represents decimal numbers.\nString (str): Represents sequences of characters.\nBoolean (bool): Represents True or False.\n\n\nExample 1\n\n\nStatic TemplateInteractive Cell\n\n\n\n# Demonstrating different data types\n\n# Integer\na = 10\nprint(\"Integer:\", a, type(a))\n\n# Float\nb = 3.14\nprint(\"Float:\", b, type(b))\n\n\n# String\nc = \"Hello, Python!\"\nprint(\"String:\", c, type(c))\n\n# Boolean\nd = True\nprint(\"Boolean:\", d, type(d))\n\nInteger: 10 &lt;class 'int'&gt;\nFloat: 3.14 &lt;class 'float'&gt;\nString: Hello, Python! &lt;class 'str'&gt;\nBoolean: True &lt;class 'bool'&gt;\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n2.2.1 Variables\nVariables are used to store data in memory. A variable is created when you assign a value to it using the = operator.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.2 Input and Output Statements\nPython provides the input() function to take user input and the print() function to display output.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.3 Operators\nOperators are special symbols used to perform operations on variables and values. Python supports several types of operators:\nArithmetic Operators: +, -, *, /, //, %, ** Comparison Operators: ==, !=, &gt;, &lt;, &gt;=, &lt;= Logical Operators: and, or, not Assignment Operators: =, +=, -=, *=, /=, //=, %=, **=\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.4 Arithmetic Expressions\nAn arithmetic expression is a combination of numbers, operators, and variables that evaluates to a value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.5 Operator Precedence\nOperator precedence determines the order in which operations are performed in an expression. The following list shows the precedence from highest to lowest:\n** (Exponentiation) *, /, //, % (Multiplication, Division, Floor Division, Modulus) +, - (Addition, Subtraction)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.6 Evaluation of Expressions\nPython evaluates expressions from left to right, following the precedence rules.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n2.2.7 Conditional Statements in Python\nConditional statements in Python allow the execution of specific code blocks based on whether a condition is true or false. Let’s explore various types of conditional statements.\n\n2.2.7.1 The if Statement\nThe if statement tests a specific condition. If the condition is true, the code block under the if statement is executed.\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation The above program checks if number is greater than 0. Since 10 is greater than 0, the condition is true, and the message is printed.\n\n\n2.2.7.2 The if-else Statement\nThe if-else statement allows you to execute one block of code if the condition is true and another block if it is false.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation In this example, the program checks if number is greater than or equal to 0. If true, it prints that the number is non-negative. Otherwise, it prints that the number is negative. Example 2\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation This program checks if a person’s age is greater than or equal to 18. If true, it prints that the person is eligible to vote. Otherwise, it states they are not eligible to vote. #### The elif Statement The elif statement, short for “else if,” allows you to check multiple conditions sequentially. If one of the conditions is true, the corresponding block of code is executed.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation Here, the program checks three conditions: whether the number is positive, zero, or negative. The elif statement handles the case where number is exactly 0.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation This program assigns a grade based on the marks obtained. Depending on the range in which the marks fall, the corresponding grade is assigned and printed.\n\n\n2.2.7.3 Nested if-else Statements\nNested if-else statements allow you to include an if-else statement inside another if-else block for handling more complex conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation This example checks if a number is positive and then further checks whether it is even or odd using nested if-else statements.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExplanation This program checks if a score is at least 50. If true, it further checks if the score is 90 or above, printing “Excellent!” if it is, and “Good job!” if it isn’t. If the score is below 50, it prints “Better luck next time.”",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sample Programs</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]